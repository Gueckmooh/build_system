{{- /* -*- mode: go; -*- */ -}}

{{- /* func NewClass(L *lua.LState) *lua.LUserData */ -}}
{{.Signature}} {
	{{- $nparam := 1}}
	{{- $params := newl}}
	{{- if .Class.HasCtor }}
	{{- range .Class.Ctor.Type.Parameters}}
	{{- $nparams := printf "%d" $nparam}}
	{{- $paramname := printf "p%d" $nparam}}
	{{- if .Type.NeedsEllipsis}}
	{{- $params = printf "%s..." $paramname | appendl $params}}
	{{- else}}
	{{- $params = appendl $params $paramname}}
	{{- end}}
	{{- if .Type.IsContainer}}
	{{- $tempparamname := printf "p%dvalue" $nparam}}
	{{$tempparamname}} := L.Get({{$nparam}})
	var {{$paramname}} {{.Type.GoString}}
	{{- if .Type.IsMap}}
	{{$paramname}} = make({{.Type.GoString}})
	{{- end}}
	if {{$tempparamname}}.Type() == lua.LTTable {
		L.ForEach({{$tempparamname}}.(*lua.LTable), func({{if .Type.IsMap}}k{{else}}_{{end}}, v lua.LValue) {
			if v.Type() == {{.Type.InsideType.LuaString}} {{if .Type.IsMap}}&& k.Type() == {{.Type.KeyType.LuaString}}{{end}}{
				{{- if .Type.IsMap}}
				{{$paramname}}[{{.Type.InsideType.ToGoType "k"}}] = {{.Type.InsideType.ToGoType "v"}}
				{{- else}}
				{{$paramname}} = append({{$paramname}}, {{.Type.InsideType.ToGoType "v"}})
				{{- end}}
			} else {
				L.ArgError({{$nparam}}, "string table expected")
			}
		})
	{{- if .Type.IsMap}}
	}
	{{- else}}
	} else if {{$tempparamname}}.Type() == {{.Type.InsideType.LuaString}} {
		{{$paramname}} = append({{$paramname}}, {{.Type.InsideType.ToGoType $tempparamname}})
	} else {
		L.ArgError({{$nparam}}, "string or string table expected")
	}
  {{- end}}
	{{- else}}
	{{$paramname}} := {{.Type.CheckFunction.CallExpr "L" $nparams}}
	{{- end}}
	{{- $nparam = add $nparam 1}}
	{{- end}}
	{{- end}}

	ud := L.NewUserData()
	{{- /* @todo check if the type has a ctor */}}
	{{- $paramuse := join $params ", "}}
	v{{if .Class.Ctor.MayFail}}, err {{end}} := {{.Class.Constructor $paramuse}}
	{{- if .Class.Ctor.MayFail}}
	if err != nil {
		L.Error(lua.LString(err.Error()), 1)
	}
	{{- end}}
	ud.Value = v
	L.SetMetatable(ud, L.GetTypeMetatable({{.Class.MetatableName}}))
	return ud
}
